#include<bits/stdc++.h>
 
using namespace std;
 
const long long N = 1e18 + 2 ;
long long  n , a[100004] ;
struct node
{
    long long  x,l,r,add,s ;
    node * left ;
    node * right ;
    node ( long long  xx ,long long  ll , long long  rr )
    {
        add = 0 ;
        s = N ;
        x = xx ;
        l = ll;
        r = rr;
        left = nullptr ;
        right = nullptr ;
    }
 
};
long long  get_x ( node * root )
{
    if ( root!= nullptr)
    {
        return root->x + root-> add ;
    }
    return N ;
}
 
 
 
 
void push( node * root )
{
 
    if ( root == nullptr )
        return ;
 
    if ( root->left )
    {
 
        if ( root-> s != N )
        {
            root->left-> add = 0 ;
            root->left->x = root->s;
            root->left->s = root->s ;
        }
        root->left->add +=root->add ;
 
    }
    if ( root->right )
    {
 
 
        if ( root -> s != N )
        {
            root->right->x = root->s ;
            root->right->add = 0 ;
            root->right->s = root->s ;
        }
 
        root->right->add +=root->add ;
 
 
    }
 
    if ( root-> s != N  )
    {
        root-> x  = root-> s ;
    }
    root-> x +=root-> add;
    root-> s = N;
    root->add  = 0;
 
}
 
node * build ( long long  l , long long  r )
{
 
    if ( r < l )
        return nullptr ;
    if ( l == r )
    {
        node * res = new node ( a[l] , l , l) ;
        return res ;
    }
 
    node * res1 = build ( l , (l+ r ) /2 ) ;
    node * res2 = build ( (l+r)/2 + 1 , r ) ;
 
    node * root = new node (min(get_x (res1) , get_x ( res2)) , l , r );
    root->left = res1 ;
    root->right = res2 ;
 
    return root ;
}
 
 
 
 
long long  zap ( node * root , long long  l , long long  r )
{
    if ( root == nullptr )
        return N ;
    if ( root-> r < l || r < root->l )
    {
        return N;
    }
    //cout << root->l << " " << root->r << " " << get_x ( root) <<"\n";
    if ( l <= root->l && root-> r<= r )
        return get_x ( root);
        push ( root ) ;
    return  min( zap( root->left , l ,r),zap ( root->right , l , r ) );
 
}
 
void sett ( node * root , long long  l , long long r ,long long  val )
{
    if ( root == nullptr )
        return ;
    if ( root->r < l || r < root->l  )
        return ;
   // cout << "sett1 " <<root->l << " " << root-> r << " " << root->x <<"\n";
    if ( l <= root->l && root->r <= r )
    {
 
        root-> add = 0 ;
        root-> s = val ;
        root-> x = val;
        //cout << root-> l << " " << root->r << " " << get_x ( root) <<"\n";
        return ;
    }
    push ( root );
 
    sett (  root->left ,l, r , val) ;
    sett (  root->right ,l,r ,val ) ;
 
   // cout << "sett2 " <<root->l << " " << root-> r << " " << root->x <<"\n";
 
    root-> x = min ( get_x ( root->left ) , get_x ( root->right ) );
    //cout << "sett3 " <<root->l << " " << root-> r << " " << root->x <<"\n";
}
 
void add ( node * root , long long l , long long r, long long val )
{
    if ( root == nullptr )
        return ;
    if ( root->r < l || r < root-> l)
    {
        return ;
    }
    //cout << "add1 " <<root->l << " " << root-> r << " " << root->x <<"\n";
    if ( l <= root->l && root->r <= r )
    {
 
        root->add +=val;
 
        return ;
    }
 
    push ( root ) ;
    add ( root->left , l , r , val ) ;
    add ( root->right, l , r , val ) ;
 
    //cout << "add2 " <<root->l << " " << root-> r << " " << root->x <<"\n";
 
    root-> x = min ( get_x ( root->left ) , get_x ( root->right ) );
   // cout << "add3 " <<root->l << " " << root-> r << " " << root->x <<"\n";
}
node * root ;
string s;
long long x ,y , val;
 
int main()
{
    //freopen("input.txt","r",stdin) ;
    cin >> n ;
    for (int i =1 ;i<=n ; i ++)
        cin >> a[i] ;
    root = build ( 1 , n ) ;
    while (cin >> s )
    {
 
            if ( s == "min" )
            {
                cin >> x >> y ;
                cout << zap (root , x , y ) <<"\n" ;
            }
            if ( s == "set" )
            {
                cin >> x >> y >>val;
                sett ( root , x, y ,val) ;
            }
            if ( s == "add" )
            {
                cin >> x >> y >> val;
                add ( root , x , y ,val);
            }
    }
 
    return 0;
}
